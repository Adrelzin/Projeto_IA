#.venv\Scripts\activate
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from imblearn.over_sampling import SMOTE
import joblib
import warnings
warnings.filterwarnings('ignore') #Ignora os warnings de funções que não funcionariam ou precisam ser mudadas

def generate_data(n=500):
    """Gera dataset sintético balanceado"""
    np.random.seed(42)
    
    d = {
        'ages': np.random.randint(20, 85, n),
        'smoking': np.random.choice([0, 1], n, p=[0.4, 0.6]),
        'yellow_fingers': np.random.choice([0, 1], n, p=[0.6, 0.4]),
        'anxiety': np.random.choice([0, 1], n, p=[0.5, 0.5]),
        'alcohol': np.random.choice([0, 1], n, p=[0.6, 0.4]),
        'peer_pressure': np.random.choice([0, 1], n, p=[0.7, 0.3]),
        'chronic_disease': np.random.choice([0, 1], n, p=[0.7, 0.3]),
        'fatigue': np.random.choice([0, 1], n, p=[0.5, 0.5]),
        'allergy': np.random.choice([0, 1], n, p=[0.6, 0.4]),
        'wheezing': np.random.choice([0, 1], n, p=[0.6, 0.4]),
        'coughing': np.random.choice([0, 1], n, p=[0.5, 0.5]),
        'shortness_breath': np.random.choice([0, 1], n, p=[0.6, 0.4]),
        'swallowing_difficulty': np.random.choice([0, 1], n, p=[0.7, 0.3]),
        'chest_pain': np.random.choice([0, 1], n, p=[0.6, 0.4])
    }
    
    risk = ((d['ages'] > 60) * 0.3 + d['smoking'] * 0.4 + d['yellow_fingers'] * 0.2 +
            d['chronic_disease'] * 0.25 + d['coughing'] * 0.3 + d['shortness_breath'] * 0.35 +
            d['chest_pain'] * 0.3 + d['wheezing'] * 0.25 + d['fatigue'] * 0.15 +
            np.random.normal(0, 0.15, n))
    
    cancer = (risk > 1.2).astype(int)
    
    # Balancear 50/50
    half = n // 2
    idx = np.concatenate([np.where(cancer == 0)[0][:half], np.where(cancer == 1)[0][:half]])
    
    return pd.DataFrame({
        'AGE': d['ages'][idx], 'SMOKING': d['smoking'][idx],
        'YELLOW_FINGERS': d['yellow_fingers'][idx], 'ANXIETY': d['anxiety'][idx],
        'ALCOHOL CONSUMING': d['alcohol'][idx], 'PEER_PRESSURE': d['peer_pressure'][idx],
        'CHRONIC DISEASE': d['chronic_disease'][idx], 'FATIGUE': d['fatigue'][idx],
        'ALLERGY': d['allergy'][idx], 'WHEEZING': d['wheezing'][idx],
        'COUGHING': d['coughing'][idx], 'SHORTNESS OF BREATH': d['shortness_breath'][idx],
        'SWALLOWING DIFFICULTY': d['swallowing_difficulty'][idx], 'CHEST PAIN': d['chest_pain'][idx],
        'LUNG_CANCER': cancer[idx]
    })

print("="*70)
print("  TREINAMENTO - PREVISÃO DE CÂNCER PULMONAR")
print("="*70)

# Gerar dados
print("\n[1/5] Gerando dataset...")
data = generate_data(500)
print(f"OK {data.shape[0]} registros")

X = data.drop(['LUNG_CANCER'], axis=1)
y = data['LUNG_CANCER']
print(f"OK Classes: Neg={sum(y==0)} | Pos={sum(y==1)}")

# Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# SMOTE
smote = SMOTE(random_state=42, k_neighbors=5)
X_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)
print(f"OK Treino: {X_train_bal.shape[0]} amostras")

# Treinar
print("\n[2/5] Treinando RandomForest...")
model = RandomForestClassifier(n_estimators=200, max_depth=10, min_samples_split=5,
                                min_samples_leaf=3, max_features='sqrt', random_state=42,
                                n_jobs=-1, oob_score=True)
model.fit(X_train_bal, y_train_bal)
print(f"OK Treinado! OOB={model.oob_score_:.2%}")

# Avaliar
print("\n[3/5] Avaliando...")
y_pred = model.predict(X_test)
acc = accuracy_score(y_test, y_pred)
cm = confusion_matrix(y_test, y_pred)

print(f"\nAcurácia: {acc:.2%}")
print(classification_report(y_test, y_pred, target_names=['Negativo', 'Positivo']))
print(f"\nMatriz: NEG[{cm[0][0]},{cm[0][1]}] POS[{cm[1][0]},{cm[1][1]}]")

# Cenários
print("\n[4/5] Testando cenários...")
scenarios = [
    ("Jovem Saudável", [25,0,0,0,0,0,0,0,0,0,0,0,0,0]),
    ("Fumante Leve", [35,1,0,0,1,0,0,0,0,0,0,0,0,0]),
    ("Sintomas Moderados", [50,1,1,0,1,0,0,1,0,1,1,0,0,0]),
    ("Alto Risco", [70,1,1,1,1,1,1,1,1,1,1,1,1,1])
]

probs = []
for name, vals in scenarios:
    prob = model.predict_proba(pd.DataFrame([vals], columns=X.columns))[0][1] * 100
    probs.append(prob)
    bar = "█" * int(prob/3)
    print(f"{name:20s} {prob:5.1f}% │{bar}")

amp = max(probs) - min(probs)
status = "EXCELENTE" if amp>60 else "BOM" if amp>40 else "REGULAR"
print(f"\nAmplitude: {amp:.1f}pp - {status}")

# Features importantes
print("\n[5/5] Features importantes:")
for feat, imp in sorted(zip(X.columns, model.feature_importances_), key=lambda x:x[1], reverse=True)[:5]:
    print(f"  {feat:30s} {imp:.4f}")

# Salvar
joblib.dump(model, 'modelo_random_forest.pkl')
joblib.dump(X.columns.tolist(), 'features.pkl')
print(f"\nCONCLUIDO | Acuracia: {acc:.2%} | Amplitude: {amp:.1f}pp")
print("Proximo passo: streamlit run app.py")
